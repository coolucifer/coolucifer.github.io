webpackJsonp([8],{baR8:function(t,i){},p3Zi:function(t,i,n){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var e=n("V8mf"),a=n.n(e),s=n("240R"),r={name:"NovTwentiyNinth",data:function(){return{isIndex:!1,sidebarlists:[]}},components:{},mounted:function(){a.a.highlightCode(),s.a.bus.$emit("isIndex",this.isIndex),s.a.bus.$emit("sidebarlists",this.sidebarlists)}},v={render:function(){var t=this.$createElement,i=this._self._c||t;return i("div",{staticClass:"shadowbox",attrs:{id:"blog"}},[i("ul",{staticClass:"pager"},[i("li",{staticClass:"previous"},[i("router-link",{attrs:{to:"/2017-11-26"}},[this._v("上一篇\n          "),i("span",{attrs:{"aria-hidden":"true"}},[this._v("←")])])],1),this._v(" "),i("li",{staticClass:"next"},[i("router-link",{attrs:{to:"/2017-12-06"}},[this._v("下一篇\n          "),i("span",{attrs:{"aria-hidden":"true"}},[this._v("→")])])],1)]),this._v(" "),i("h1",[this._v("jQuery实战: 表单验证(下)")]),this._v(" "),i("time",{attrs:{datetime:"2017-11-29"}},[this._v("2017-11-29")]),this._v(" "),this._m(0)])},staticRenderFns:[function(){var t=this.$createElement,i=this._self._c||t;return i("div",{staticClass:"blog-content"},[i("p",[this._v("上次我们讲到了如何为表单验证制定规则以及对规则的处理,之后就到了规则的验证阶段.")]),this._v(" "),i("p",[this._v("表单验证的第二步就是规则验证,这里会使用构造器来创建一个构造函数"),i("code",[this._v("window.Validator()")]),this._v(",这样就可以使每一个input在blur的时候执行"),i("code",[this._v("this.validator.is_valid()")]),this._v("来验证内容了.")]),this._v(" "),i("pre",[this._v(" //传入input中的内容以及data-rule\n window.Validator = function (val,rule) {\n ... //验证\n }\n")]),this._v(" "),i("p",[this._v("对于每个单独的规则,可以在validator中创建对应的验证函数.比如"),i("code",[this._v('data-rule="max:10"')]),this._v(",可以创建对应的"),i("code",[this._v("validate_max()")]),this._v(":")]),this._v(" "),i("pre",[this._v(" this.validate_max = function () {\n  val = parseFloat(val);  //将传进来的val转换成数字类型\n  return val <= rule.max;  //符合则返回true,否则返回false\n }\n")]),this._v(" "),i("p",[this._v("当data-rule是正则表达式("),i("code",[this._v('data-rule="pattern:^[a-z0-9]*$"')]),this._v(")时,对应的验证函数为:")]),this._v(" "),i("pre",[this._v(" this.validate_pattern = function () {\n  var reg = new RegExp(rule.pattern);\n  return reg.test(val);\n }\n")]),this._v(" "),i("p",[this._v("有一个总的验证函数"),i("code",[this._v("is_valid()")]),this._v("来确定内容是否符合要求:")]),this._v(" "),i("pre",[this._v(" this.is_valid = function (new_val) {  //这里的new_val是用户输入的val\n  if (new_val !== undefined) {\n    val = new_val;\n  }\n  // if(new_val)\n  // val = new_val;            \n  var key; //key是rule{}里的'max'或'min'等            \n  // 先验证是否为必填项,若不是必填项且用户未填写内容则直接判定为合法\n  if (!rule.required && !val) {\n    return true;\n  }            \n  for (key in rule) {  //对rule{}中的每一项进行检测\n    // 防止重复检测\n    if (key === 'required')\n      continue;\n    // 调用rule中相对应的方法\n    var r = this['validate_' + key](); //this.validate_max()\n    if (!r) return false;  //若验证不通过直接返回\n  }\n  return true;\n }\n")]),this._v(" "),i("p",[this._v("这样表单验证的验证函数部分就完成了,下一步就是将每个input和validator绑定起来,这里设立一个监听函数"),i("code",[this._v("listen()")]),this._v(",当每一个input失去焦点(blur)的时候执行:")]),this._v(" "),i("pre",[this._v(" function listen() {\n  $ele.on('blur',function () {\n    var valid = me.validator.is_valid(me.get_val());  //获取输入框内的值\n    if (valid)\n      $error_ele.hide();  //错误提示\n    else\n      $error_ele.show();\n  })\n }\n")]),this._v(" "),i("p",[this._v("最后在整个表单提交的时候进行一个总的验证:")]),this._v(" "),i("pre",[this._v(" //在表单提交的时候进行验证\n $form.on('submit',function(event){\n  event.preventDefault();  //防止刷新\n  $inputs.trigger('blur');\n  for(var i = 0; i < inputs.length; i ++){\n    var item = inputs[i];\n    var r = item.validator.is_valid();\n    if(!r){\n      alert('invalid');\n      return;\n    }\n  }\n  alert('valid!');\n })\n")]),this._v(" "),i("p",[this._v("这样,表单验证就完成了.")])])}]};var l=n("VU/8")(r,v,!1,function(t){n("baR8")},"data-v-116c560c",null);i.default=l.exports}});
//# sourceMappingURL=8.3663b18eb92f871d13be.js.map